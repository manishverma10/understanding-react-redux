{"version":3,"sources":["store/actions/updateMovies.js","store/actions/fetchUsers.js","App.js","serviceWorker.js","store/reducers/movielistReducer.js","store/reducers/userReducer.js","store/index.js","index.js"],"names":["updateMovies","type","payload","fetchUsers","dispatch","fetch","then","res","json","data","connect","state","movies","users","props","className","style","color","name","onClick","length","map","user","key","id","first_name","email","Boolean","window","location","hostname","match","movielistReducer","userReducer","middleware","thunk","allReducers","combineReducers","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+PAKeA,EAJM,CACfC,KAFuB,gBAGvBC,QAAS,sBCGAC,EALI,SAACC,GAChBC,MAAM,+BACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIH,EAAS,CAACH,KAJA,cAIiBC,QAAQK,EAAIE,WCoBxD,IAYeC,eAZS,SAACC,GACrB,MAAO,CACPC,OAAQD,EAAMC,OACdC,MAAOF,EAAME,UAGU,SAACT,GACxB,MAAO,CACPJ,aAAc,kBAAKI,EAASJ,IAC5BG,WAAY,kBAAKC,EAASD,OAGfO,EA/Bf,SAAaI,GACT,OACA,yBAAKC,UAAU,OACX,mDACA,6BACA,0BACAC,MAAO,CAACC,MAAM,UADd,2BAEgCH,EAAMF,OAAOM,KACjD,6BACA,2BAAG,4BAAQC,QAASL,EAAMd,cAAvB,qBACH,6BAC4B,IAAvBc,EAAMD,MAAMO,OACb,iDACAN,EAAMD,MAAMQ,KAAI,SAAAC,GAAI,OAAG,uBAAGC,IAAKD,EAAKE,IAAKF,EAAKG,WAAvB,SAAyCH,EAAKI,UACzE,6BACA,4BAAQP,QAASL,EAAMX,YAAvB,mBCRgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTSC,EARU,WAAiC,IAAhCrB,EAA+B,uDAAxB,GAAwB,yCAAnBV,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACtC,OAAOD,GACA,IJHgB,gBIIhB,MAAO,CAACiB,KAAMhB,GACd,QACR,OAAOS,ICGGsB,EARK,WAAkC,IAAjCtB,EAAgC,uDAAxB,GAAwB,yCAAnBV,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACpC,OAAOD,GACH,IJHmB,cIInB,OAAOC,EACP,QACJ,OAAOS,ICFLuB,EAAa,C,KAACC,GACdC,EAAcC,YAAgB,CAACzB,OAAQoB,EAAkBnB,MAAOoB,IAMvDK,EADDC,YAAYH,EAJL,CACjBvB,MAAO,GACPD,OAAQ,CAACM,KAAM,iBAEkCsB,YAASC,IAAe,WAAf,EAAmBP,GAAaN,OAAOc,8BAAgCd,OAAOc,iCCH5IC,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GAAO,kBAAC,EAAD,OAAoBO,SAASC,eAAe,SJ4H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ec92dfe.chunk.js","sourcesContent":["export const UPDATE_MOVIES = \"UPDATE_MOVIES\";\nconst updateMovies = {\n      type: UPDATE_MOVIES,\n      payload: \"THE BREAKFAST CLUB\"\n};\nexport default updateMovies;","export const FETCH_USERS = \"FETCH_USERS\";\nconst fetchUsers = (dispatch) => {\n    fetch('https://reqres.in/api/users')\n    .then(res => res.json())\n    .then(res => dispatch({type:FETCH_USERS,payload:res.data}))\n};\nexport default fetchUsers;","import React from 'react';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport updateMovies from './store/actions/updateMovies';\nimport fetchUsers from './store/actions/fetchUsers';\nfunction App(props) {\n    return (\n    <div className=\"App\">\n        <h3>REDUX MOVIELIST APP</h3>\n        <br/>\n        <span\n        style={{color:'green'}}\n        >YOUR CURRENT MOVIE IS: </span>{props.movies.name}\n    <br/>\n    <p><button onClick={props.updateMovies}>SELECT NEW MOVIE</button></p>\n    <br/>\n        {props.users.length === 0 ?\n        <p>THERE ARE NO USERS</p> :\n        props.users.map(user=> <p key={user.id}>{user.first_name} -    {user.email}</p>)}\n    <br/>\n    <button onClick={props.fetchUsers}>FETCH USERS</button>\n    </div>\n);\n};\nconst MapStateToProps = (state) => {\n    return {\n    movies: state.movies,\n    users: state.users\n};\n};\nconst MapDispatchToProps = (dispatch) => {\n    return {\n    updateMovies: ()=> dispatch(updateMovies),\n    fetchUsers: ()=> dispatch(fetchUsers)\n};\n};\nexport default connect(MapStateToProps, MapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {UPDATE_MOVIES} from '../actions/updateMovies';\nconst movielistReducer = (state ={}, {type, payload}) => {\n      switch(type) {\n             case UPDATE_MOVIES :\n             return {name: payload}\n             default :\n     return state\n};\n};\nexport default movielistReducer;","import {FETCH_USERS} from '../actions/fetchUsers';\nconst userReducer = (state = {}, {type, payload}) => {\n    switch(type) {\n        case FETCH_USERS :\n        return payload\n        default :\n    return state\n};\n};\nexport default userReducer;","import {createStore, combineReducers, compose, applyMiddleware} from 'redux';\nimport movielistReducer from './reducers/movielistReducer';\nimport userReducer from './reducers/userReducer';\nimport thunk from 'redux-thunk';\nconst middleware = [thunk];\nconst allReducers = combineReducers({movies: movielistReducer, users: userReducer});\nconst initialState = {\n    users: [],\n    movies: {name: \"TERMINATOR 2\"}\n};\nconst store = createStore(allReducers, initialState, compose( applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index'\nimport {Provider} from 'react-redux'\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}